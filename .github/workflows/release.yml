name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create release for (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: make test

      - name: Run linting
        run: make lint

      - name: Check formatting
        run: |
          make fmt
          if ! git diff --exit-code; then
            echo "Code is not properly formatted. Please run 'make fmt' and commit the changes."
            exit 1
          fi

  build:
    name: Build Cross-Platform Binaries
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit_hash: ${{ steps.version.outputs.commit_hash }}
      build_date: ${{ steps.version.outputs.build_date }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Extract version information
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          
          echo "Building version: ${VERSION}"
          echo "Commit hash: ${COMMIT_HASH}"
          echo "Build date: ${BUILD_DATE}"

      - name: Build cross-platform binaries
        run: |
          export VERSION=${{ steps.version.outputs.version }}
          export COMMIT_HASH=${{ steps.version.outputs.commit_hash }}
          export BUILD_DATE=${{ steps.version.outputs.build_date }}
          make build-all

      - name: Create checksums and archives
        run: make archive

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: claude-cmd-binaries
          path: |
            dist/claude-cmd-*
            dist/checksums.txt
            dist/*.tar.gz
            dist/*.zip
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: claude-cmd-binaries
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          COMMIT_HASH="${{ needs.build.outputs.commit_hash }}"
          BUILD_DATE="${{ needs.build.outputs.build_date }}"
          
          # Get the previous tag for changelog
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "${VERSION}" | head -n1)
          
          # Generate changelog if previous tag exists
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" "${PREVIOUS_TAG}..HEAD" --no-merges)
          else
            CHANGELOG="- Initial release"
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## Claude CMD ${VERSION}
          
          ### Build Information
          - **Version**: ${VERSION}
          - **Commit**: ${COMMIT_HASH}
          - **Built**: ${BUILD_DATE}
          
          ### Changes
          ${CHANGELOG}
          
          ### Installation
          
          Download the appropriate binary for your platform:
          
          #### Linux
          \`\`\`bash
          # AMD64
          wget https://github.com/claude-code-commands/claude-cmd/releases/download/${VERSION}/linux-amd64.tar.gz
          tar -xzf linux-amd64.tar.gz
          sudo mv claude-cmd-linux-amd64 /usr/local/bin/claude-cmd
          
          # ARM64
          wget https://github.com/claude-code-commands/claude-cmd/releases/download/${VERSION}/linux-arm64.tar.gz
          tar -xzf linux-arm64.tar.gz
          sudo mv claude-cmd-linux-arm64 /usr/local/bin/claude-cmd
          \`\`\`
          
          #### macOS
          \`\`\`bash
          # Intel Macs
          wget https://github.com/claude-code-commands/claude-cmd/releases/download/${VERSION}/darwin-amd64.tar.gz
          tar -xzf darwin-amd64.tar.gz
          sudo mv claude-cmd-darwin-amd64 /usr/local/bin/claude-cmd
          
          # Apple Silicon Macs
          wget https://github.com/claude-code-commands/claude-cmd/releases/download/${VERSION}/darwin-arm64.tar.gz
          tar -xzf darwin-arm64.tar.gz
          sudo mv claude-cmd-darwin-arm64 /usr/local/bin/claude-cmd
          \`\`\`
          
          #### Windows
          Download the appropriate zip file and extract the executable to a directory in your PATH.
          
          ### Verification
          
          All binaries can be verified using the provided checksums:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ### Usage
          
          \`\`\`bash
          claude-cmd --help
          claude-cmd list
          claude-cmd add <command-name>
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Claude CMD ${{ needs.build.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
          files: |
            dist/claude-cmd-*
            dist/checksums.txt
            dist/*.tar.gz
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: claude-cmd-binaries
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.tag }}"
          COMMIT_HASH="${{ needs.build.outputs.commit_hash }}"
          BUILD_DATE="${{ needs.build.outputs.build_date }}"
          
          cat > release_notes.md << EOF
          ## Claude CMD ${VERSION} (Draft)
          
          ### Build Information
          - **Version**: ${VERSION}
          - **Commit**: ${COMMIT_HASH}
          - **Built**: ${BUILD_DATE}
          
          ### Installation
          
          This is a draft release. Installation instructions will be provided when the release is published.
          
          ### Usage
          
          \`\`\`bash
          claude-cmd --help
          claude-cmd list
          claude-cmd add <command-name>
          \`\`\`
          EOF

      - name: Create Draft GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Claude CMD ${{ github.event.inputs.tag }}
          body_path: release_notes.md
          draft: true
          prerelease: ${{ contains(github.event.inputs.tag, '-') }}
          files: |
            dist/claude-cmd-*
            dist/checksums.txt
            dist/*.tar.gz
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}